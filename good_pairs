#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>

using namespace std;


long long getNumberOfGoodPairs(int n, const vector<int>& numbers) {

	if (numbers.size() <= 1)
		return 0;

	long long count = 0;
	unordered_map<int, long long> modValue;
	for (int i = 0; i < numbers.size(); ++i)
	{
		long currentMod = numbers[i] % 200;
		auto iterFind = modValue.find(currentMod);
		if (iterFind == modValue.end())
			modValue[currentMod] = 1;
		else
		{
			++modValue[currentMod];

		}

	}
	for (auto val : modValue)
	{
		if (val.second < 2)
			continue;


		count += ((val.second *(val.second - 1)) / 2);

	}

	return count;
}

int readInt() {
	int x;
	cin >> x;
	return x;
}

vector<int> readList(int n) {
	vector<int> res(n);
	for (int i = 0; i < n; i++) {
		cin >> res[i];
	}
	return res;
}

int main() {
	int n = readInt();
	vector<int> numbers = readList(n);
	cout << getNumberOfGoodPairs(n, numbers);
}
