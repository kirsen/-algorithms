 ПРИНЦИП РАБОТЫ --
Алгоритм использует быструю сортировку in-place quick sort

Из задания описание использования in-place (функция  partition(vector<Player> &players, const Player &pivot,
	int &left,
	int &right)):
/////////////////////////////
 Заводятся два указателя left и right, которые изначально  указывают на левый и правый концы отрезка соответственно.                         ///
 Затем двигается левый указатель вправо до тех пор, пока он указывает на элемент, меньший опорного.                                         ///
 Аналогично двигается правый указатель влево, пока он стоит на элементе, превосходящем опорный.                                                   ///
 В итоге окажется, что что левее от left все элементы точно принадлежат первой группе, а правее от right — второй.								///
 Элементы, на которых стоят указатели, нарушающие порядок меняются местами (в большинстве языков программирования используется функция swap()) ///
 и продвинем указатели на следующие элементы. Будем повторять это действие до тех пор, пока left и right не столкнутся 
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
 После разбиения на две части сортируются правя и левая части

leftShift - смещенный указатель от начала до элементов меньших pivot
rightShift - смещенный указатель от конца на элементы большие pivot

 left--------rightShift leftShift ----------------right
 [left, rightShift ) [leftShift, right - 1)

Выход из  рекурсии прекратятся в тот момент, когда размер обоих частей будет меньше или равен единице.

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
Движение влево и вправо пока не найдется пара элементов не стоящих на месте гарантируют, что будут переставлены все элементы, стоящие не на месте,
а использование в качестве ссылок leftShift и rightShift, позволяет нам не использовать дополнительные контейнеры, а перемещаться в
сортируемом массиве и сортировать отдельные части не создавая временных хранилищ


-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
Временная сложность зависит от размера входного массива и алгоритма метода разделения partition
n- общее число
k - элементы слева меньшие pivot
T(n) = T(k) + T(n-k-1) +O (n)

где, T(k) and T(n-k-1) время рекурсивных вызовов and O(n)- время для partition

Худший случай если в качестве опорного выбрали элемент максимальный или минимальный
T(n) = T(0) + T(n-1) + O(n) ~ O(n^2)

Лучший случай,когда опорный элемент посредине

T(n) = 2T(n/2) + O(n) ~ O(nlogn)

Средний случай: Чтобы проанализировать средний случай, нужно рассмотреть все перестановки массива, а 
затем вычислить время, затраченное на каждую из этих перестановок ~ O(nlogn).

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
Для данной задачи не создавались дополнительные временные буфферы, но есть рекурсивные вызовы
в худшем случае глубина рекурсии при выполнении алгоритма достигнет n, что будет означать n-кратное сохранение адреса
возврата и локальных переменных процедуры разделения массивов. 
 O(n) памяти.
*/
#include <string>
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

struct  Player
{
	string _name;
	int _completed_task;
	int _fine;
};

std::istream& operator>> (std::istream& in, Player& p)
{
	in >> p._name >> p._completed_task >> p._fine;
	return in;
}


bool operator< (const Player & lhs, const Player & rhs) {

	if (lhs._completed_task < rhs._completed_task)
		return true;

	if (rhs._completed_task == lhs._completed_task)
	{
		if (lhs._fine == rhs._fine)
		{
			if (lexicographical_compare(rhs._name.begin(), rhs._name.end(), lhs._name.begin(), lhs._name.end())) // gosha < rita
				return true;
		}

		if (lhs._fine > rhs._fine)
			return true;

	}
	return false;
}


bool operator== (const Player & lhs, const Player & rhs) {

	if (lhs._completed_task != rhs._completed_task)
		return false;

	if (lhs._fine != rhs._fine)
		return false;

	if (lhs._name != rhs._name)
		return false;

	return true;

}


void partition(  vector<Player> &players, const Player &pivot,
	int &left, 
	int &right)
{

	do {
		while (players[left] < pivot) ++left;
		while (pivot < players[right]) --right;

		if (left <= right) {
			if ((pivot < players[left] || pivot == players[left]) && 
				(players[right] < pivot || players[right] == pivot)) 
				swap(players[left], players[right]);
			++left;
			--right;
			
		}
	} while (left <= right);

}
void quicksort(vector<Player> &players, int left, int right)
{

	int leftShifted = left;
	int rightShifted = right;

	Player pivot = players[(left + right) / 2];
	partition(players, pivot, leftShifted, rightShifted);

	if (leftShifted < right)
		quicksort(players, leftShifted, right);

	if (left < rightShifted)
		quicksort(players, left, rightShifted);

}

int main()
{
	int n = 0;
	cin >> n;
	vector<Player> players;
	for (int i = 0; i < n; ++i)
	{
		Player player;
		cin >> player;
		players.push_back(player);
	}

	quicksort(players, 0, players.size() - 1);

	for(int  i = players.size() - 1; i >= 0; --i)
	{
		std::cout << players[i]._name << endl;
	}
   
}
