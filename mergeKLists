#include <vector>
#include <queue>

using namespace std;
 struct ListNode {
	int val;
	ListNode *next;
	ListNode() : val(0), next(nullptr) {}
	ListNode(int x) : val(x), next(nullptr) {}
	ListNode(int x, ListNode *next) : val(x), next(next) {}
	
};


 ListNode* mergeKLists(vector<ListNode*>& lists) {
	
	
	 priority_queue<int,deque<int, allocator<int> >, greater<int>> priority_queue;
	 for (auto i = 0; i < lists.size(); ++i)
	 {
		 ListNode* curr = lists.at(i);
		 while (curr)
		 {
			 priority_queue.push(curr->val);
			 curr = curr->next;
		 }

	 }

	 ListNode* res = nullptr;
	 ListNode* prev = priority_queue.empty() ? nullptr: new ListNode(priority_queue.top());
	 if (prev)
	 {
		 priority_queue.pop();
		 res = prev;
	 }

	 while (!priority_queue.empty())
	 {
		 prev->next = new ListNode(priority_queue.top());
		 prev = prev->next;
		 priority_queue.pop();
	 }
	 return res;
 }
