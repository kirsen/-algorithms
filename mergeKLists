#include <vector>
#include <queue>

using namespace std;
 struct ListNode {
	int val;
	ListNode *next;
	ListNode() : val(0), next(nullptr) {}
	ListNode(int x) : val(x), next(nullptr) {}
	ListNode(int x, ListNode *next) : val(x), next(next) {}
	
};

 class comp
 {
 public:
	 bool operator()(const ListNode* first, const ListNode* second)
	 {
		 return first->val > second->val;
	 }
 };
ListNode* mergeKLists(vector<ListNode*>& lists) {
	ListNode* head = new ListNode(0);
	ListNode* temp = head;


	priority_queue<ListNode*, vector<ListNode*>, comp> pQ;
	for (int i = 0; i < lists.size(); ++i)
	{
		if (lists[i])
			pQ.push(lists[i]);
	}


	while (!pQ.empty())
	{
		auto  min = pQ.top();
		pQ.pop();

		temp->next = min;
		temp = temp->next;

		if(min->next)
			pQ.push(min->next);
	}
	return head->next;
}
