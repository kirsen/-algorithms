class Solution {
public:
    void dfs(vector<vector<int8_t>> &visited,
	const vector<vector<char>>& grid, int i, int j)
{
	int n = grid.size();
	int m = grid[0].size();

	if (m == 0)
		return;

	if (visited[i][j] == 1 || grid[i][j] == '0')
		return;

	visited[i][j] = 1;
	if (i >= 1 && visited[i - 1][j] == 0)
		dfs(visited, grid, i - 1, j);

	if (i < n - 1 && visited[i + 1][j] == 0)
		dfs(visited, grid, i + 1, j);

	if (j >= 1 && visited[i][j - 1] == 0)
		dfs(visited, grid, i, j - 1);


	if (j < m - 1 && visited[i][j + 1] == 0)
		dfs(visited, grid, i, j + 1);

}
    int numIslands(vector<vector<char>>& grid) {
        
       int n = grid.size();
        int m = grid[0].size();

        vector<vector<int8_t>> visited;
        visited.resize(n);

        for (int i = 0; i < n; ++i)
        {
            visited[i].resize(m, 0);
        }

        int count = 0;

        for(int i = 0; i < n; ++i)
        {

            for (int j = 0; j < m; ++j)
            {
                if (grid[i][j] == '1' && visited[i][j] == 0)
                {
                    ++count;
                    dfs(visited, grid, i, j);
                }
            }
        }
	return count; 
    }
};
